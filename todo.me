# 📰 CryptoMohem - مستندات پروژه

## 🎯 توضیح پروژه

**CryptoMohem** یک وبسایت خبری هوشمند در حوزه رمزارزها است که به صورت کاملا خودکار اخبار را از منابع معتبر جمع‌آوری، ترجمه، تصویرسازی و منتشر می‌کند.

### ویژگی‌های کلیدی:
- 🤖 **اتوماسیون کامل**: بدون نیاز به ادمین برای تولید محتوا
- 🌐 **چندمنبعی**: کرال از وبسایت‌ها و کانال‌های تلگرام
- 🧠 **هوش مصنوعی**: ترجمه، خلاصه‌سازی، تحلیل احساسات، امتیازدهی
- 🎨 **تولید تصویر**: ساخت خودکار تصویر با AI
- 📱 **PWA**: قابل نصب بر روی موبایل
- ⚙️ **قابل تنظیم**: تغییر منابع، حوزه فعالیت و تنظیمات از پنل ادمین

---

## 🏗️ تکنولوژی‌ها

### Backend:
- **Django 5.0+** - فریمورک اصلی
- **PostgreSQL** - دیتابیس اصلی
- **Redis** - کش و صف وظایف
- **Celery** - مدیریت Task های Background
- **Celery Beat** - زمان‌بندی وظایف دوره‌ای

### AI & APIs:
- **Google Gemini API** - ترجمه و تحلیل محتوا
- **Stable Diffusion API** (رایگان) - تولید تصویر
- **Telegram Bot API** - انتشار در تلگرام

### Frontend:
- **Django Templates** - رندر صفحات
- **Tailwind CSS** - استایل‌دهی (طراحی از ./design/)
- **Alpine.js** - تعاملات ساده
- **PWA** - قابلیت نصب

### DevOps:
- **Docker & Docker Compose** - کانتینریزه‌سازی
- **Nginx** - وب سرور و Reverse Proxy
- **Gunicorn** - WSGI Server

---

## 📊 معماری سیستم

```
┌─────────────────────────────────────────────────────────┐
│                    منابع خارجی                          │
│  (وبسایت‌های خبری + کانال‌های تلگرام)                   │
└──────────────────┬──────────────────────────────────────┘
                   │
                   ▼
┌─────────────────────────────────────────────────────────┐
│                 Celery Workers                          │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐             │
│  │ Crawler  │  │   AI     │  │ Publisher│             │
│  │  Tasks   │→ │ Processor│→ │  Tasks   │             │
│  └──────────┘  └──────────┘  └──────────┘             │
└──────────────────┬──────────────────────────────────────┘
                   │
                   ▼
┌─────────────────────────────────────────────────────────┐
│              Django Application                         │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐             │
│  │  Models  │  │  Views   │  │   APIs   │             │
│  └────┬─────┘  └────┬─────┘  └────┬─────┘             │
└───────┼─────────────┼─────────────┼────────────────────┘
        │             │             │
        ▼             ▼             ▼
┌──────────────┐ ┌────────────┐ ┌──────────────┐
│  PostgreSQL  │ │   Redis    │ │ Static Files │
└──────────────┘ └────────────┘ └──────────────┘
        │
        ▼
┌─────────────────────────────────────────────────────────┐
│                 خروجی‌ها                                │
│  ┌──────────┐         ┌──────────┐                     │
│  │  وبسایت  │         │  تلگرام  │                     │
│  │   PWA    │         │   بات    │                     │
│  └──────────┘         └──────────┘                     │
└─────────────────────────────────────────────────────────┘
```

---

## 🗄️ مدل‌های دیتابیس

### 1. News (خبر)
```python
- id (UUID)
- title (فارسی)
- original_title (انگلیسی/عربی)
- summary (خلاصه ۳ خطی)
- content (محتوای کامل ترجمه شده)
- original_content (محتوای اصلی)
- source_url (لینک منبع)
- source_language (en/ar)
- image (تصویر)
- category (FK)
- tags (M2M)
- impact_score (1-10)
- sentiment (bullish/bearish/neutral)
- is_published (Boolean)
- published_in_telegram (Boolean)
- published_at
- created_at
- updated_at
- hash (برای تشخیص تکراری)
```

### 2. Category (دسته‌بندی)
```python
- id
- name (Bitcoin, Altcoins, DeFi, NFT, Regulation)
- slug
- description
- is_active
```

### 3. Tag (تگ)
```python
- id
- name
- slug
```

### 4. Source (منبع)
```python
- id
- name
- type (website/telegram)
- url (URL وبسایت یا username تلگرام)
- language (en/ar)
- is_active
- crawl_interval (دقیقه)
- last_crawled_at
- priority (1-10)
```

### 5. CrawlLog (لاگ کرال)
```python
- id
- source (FK)
- status (success/failed)
- items_found
- error_message
- crawled_at
```

### 6. AIUsage (استفاده از AI)
```python
- id
- api_key_used (key1/key2)
- request_type (translate/analyze/image)
- tokens_used
- cost
- created_at
```

### 7. SiteSettings (تنظیمات)
```python
- id (singleton)
- site_title
- site_description
- telegram_bot_token
- telegram_channel_id
- gemini_api_key_1
- gemini_api_key_2
- image_api_key
- crawl_interval (دقیقه)
- min_impact_score_for_telegram (default: 4)
- auto_publish (Boolean)
```

### 8. UserBookmark (ذخیره کاربر)
```python
- id
- user (FK)
- news (FK)
- created_at
```

### 9. NewsLike (لایک)
```python
- id
- news (FK)
- ip_address
- is_like (True=like, False=dislike)
- created_at
```

---

## 🎯 امکانات نهایی

### محتوا و اتوماسیون:
- [x] کرال خودکار از منابع (وبسایت + تلگرام)
- [x] ترجمه هوشمند با Gemini
- [x] خلاصه ۳ خطی
- [x] تشخیص Bullish/Bearish
- [x] امتیازدهی Impact Score (1-10)
- [x] تولید تصویر خودکار
- [x] فیلتر اخبار تکراری (Hash-based)
- [x] انتشار خودکار در وبسایت
- [x] انتشار هوشمند در تلگرام (فقط score ≥ 4)

### نمایش محتوا:
- [x] دسته‌بندی (Bitcoin, Altcoins, DeFi, NFT, Regulation)
- [x] تگ‌گذاری
- [x] جستجو
- [x] آرشیو
- [x] قیمت Top 10 کوین (API)
- [x] Fear & Greed Index
- [x] Bitcoin Dominance

### تعامل کاربر:
- [x] لایک/دیسلایک
- [x] اشتراک‌گذاری
- [x] ذخیره خبر (Bookmark)
- [x] نظرات (با مدیریت)

### UX:
- [x] حالت شب/روز
- [x] ریسپانسیو (موبایل‌محور)
- [x] PWA (قابل نصب)
- [x] زمان تقریبی خواندن
- [x] نمایش منبع اصلی

### پنل ادمین:
- [x] مدیریت منابع (اضافه/حذف/ویرایش)
- [x] تنظیمات کلی سایت
- [x] تنظیمات API ها
- [x] مدیریت دسته‌بندی‌ها
- [x] مدیریت اخبار (ویرایش/حذف/انتشار دستی)
- [x] آمار و گزارش‌گیری
- [x] لاگ کرال‌ها
- [x] مدیریت نظرات

---

## 📋 فازبندی پروژه (15 فاز)

### 🔵 فاز 1: راه‌اندازی اولیه پروژه
**هدف**: ساخت ساختار اولیه Django و Docker

**وظایف**:
- ایجاد پروژه Django
- تنظیم PostgreSQL
- تنظیم Redis
- نوشتن Dockerfile و docker-compose.yml
- تنظیم requirements.txt
- ساخت settings مناسب (dev/prod)
- اجرای اولین migrate

**خروجی**: پروژه Django اولیه که با Docker اجرا می‌شود

---

### 🔵 فاز 2: ایجاد مدل‌های دیتابیس
**هدف**: طراحی و پیاده‌سازی تمام مدل‌های دیتابیس

**وظایف**:
- ایجاد app های core, news, sources
- پیاده‌سازی مدل News
- پیاده‌سازی مدل Category
- پیاده‌سازی مدل Tag
- پیاده‌سازی مدل Source
- پیاده‌سازی مدل CrawlLog
- پیاده‌سازی مدل AIUsage
- پیاده‌سازی مدل SiteSettings
- پیاده‌سازی مدل UserBookmark
- پیاده‌سازی مدل NewsLike
- ایجاد و اجرای migrations

**خروجی**: دیتابیس کامل با تمام جداول

---

### 🔵 فاز 3: پنل ادمین Django
**هدف**: سفارشی‌سازی پنل ادمین

**وظایف**:
- تنظیم Django Admin برای تمام مدل‌ها
- افزودن فیلترها و جستجو
- سفارشی‌سازی نمایش لیست‌ها
- افزودن اکشن‌های دسته‌جمعی
- ایجاد داشبورد آمار در ادمین
- افزودن inline برای روابط

**خروجی**: پنل ادمین قابل استفاده

---

### 🔵 فاز 4: سیستم کرال - بخش 1 (وبسایت)
**هدف**: کرال اخبار از وبسایت‌های خبری

**وظایف**:
- نصب و تنظیم Celery
- تنظیم Celery Beat
- ایجاد Task کرال وبسایت
- پیاده‌سازی Beautiful Soup / Scrapy
- استخراج عنوان، محتوا، تاریخ، تصویر
- ذخیره محتوای خام در دیتابیس
- ثبت لاگ کرال
- زمان‌بندی Task ها

**خروجی**: سیستم کرال وبسایت فعال

---

### 🔵 فاز 5: سیستم کرال - بخش 2 (تلگرام)
**هدف**: کرال اخبار از کانال‌های تلگرام

**وظایف**:
- نصب Telethon / Pyrogram
- ایجاد Task کرال تلگرام
- اتصال به کانال‌ها
- استخراج پست‌های جدید
- دانلود تصاویر
- ذخیره محتوا
- ثبت لاگ
- زمان‌بندی

**خروجی**: سیستم کرال تلگرام فعال

---

### 🔵 فاز 6: سیستم فیلتر تکراری
**هدف**: جلوگیری از ذخیره اخبار تکراری

**وظایف**:
- پیاده‌سازی Hash برای هر خبر (MD5/SHA256 از محتوا)
- چک کردن hash قبل از ذخیره
- تشخیص محتوای مشابه (Similarity Check)
- تنظیم threshold برای تشابه
- لاگ اخبار تکراری

**خروجی**: سیستم فیلتر تکراری کار می‌کند

---

### 🔵 فاز 7: ادغام AI - بخش 1 (ترجمه)
**هدف**: ترجمه خودکار اخبار با Gemini

**وظایف**:
- تنظیم دو کلید API
- پیاده‌سازی سیستم Round-Robin برای API ها
- ایجاد Task ترجمه
- نوشتن Prompt مناسب برای ترجمه
- ذخیره ترجمه در دیتابیس
- مدیریت خطاها و Retry
- ثبت استفاده API

**خروجی**: سیستم ترجمه فعال

---

### 🔵 فاز 8: ادغام AI - بخش 2 (تحلیل و امتیازدهی)
**هدف**: تحلیل احساسات و امتیازدهی

**وظایف**:
- Task تحلیل محتوا
- تشخیص Bullish/Bearish/Neutral
- محاسبه Impact Score (1-10)
- خلاصه‌سازی ۳ خطی
- استخراج تگ‌های پیشنهادی
- ذخیره نتایج
- ثبت استفاده API

**خروجی**: سیستم تحلیل فعال

---

### 🔵 فاز 9: تولید تصویر با AI
**هدف**: ساخت خودکار تصویر برای اخبار

**وظایف**:
- تنظیم API تولید تصویر
- ایجاد Task تولید تصویر
- نوشتن Prompt مناسب (از روی عنوان)
- دانلود و ذخیره تصویر
- بهینه‌سازی سایز تصویر
- Fallback برای خطا (تصویر پیش‌فرض)

**خروجی**: هر خبر تصویر دارد

---

### 🔵 فاز 10: سیستم انتشار - تلگرام
**هدف**: انتشار خودکار اخبار در کانال تلگرام

**وظایف**:
- تنظیم Bot API
- ایجاد Task انتشار
- فیلتر اخبار (فقط score ≥ 4)
- فورمت پیام (عنوان، خلاصه، دکمه)
- ارسال پیام + تصویر
- ثبت وضعیت انتشار در دیتابیس
- مدیریت خطا

**خروجی**: اخبار مهم در تلگرام منتشر می‌شوند

---

### 🔵 فاز 11: ساخت Frontend - بخش 1 (صفحات اصلی)
**هدف**: پیاده‌سازی صفحات اصلی وبسایت

**وظایف**:
- استفاده از طراحی ./design/
- نصب Tailwind CSS
- صفحه اصلی (Home)
- لیست اخبار
- جزئیات خبر (Detail)
- صفحه دسته‌بندی
- صفحه آرشیو
- صفحه جستجو
- Header & Footer

**خروجی**: صفحات اصلی کار می‌کنند

---

### 🔵 فاز 12: ساخت Frontend - بخش 2 (ویژگی‌ها)
**هدف**: پیاده‌سازی ویژگی‌های تعاملی

**وظایف**:
- سیستم لایک/دیسلایک (AJAX)
- سیستم Bookmark
- اشتراک‌گذاری (Share buttons)
- نظرات (Django Comments / Custom)
- حالت شب/روز (Local Storage)
- قیمت لحظه‌ای (API خارجی)
- Fear & Greed Index
- Bitcoin Dominance

**خروجی**: ویژگی‌های تعاملی فعال

---

### 🔵 فاز 13: PWA و بهینه‌سازی
**هدف**: تبدیل به Progressive Web App

**وظایف**:
- ایجاد manifest.json
- ایجاد Service Worker
- تنظیم Cache Strategy
- افزودن آیکون‌ها
- تست نصب PWA
- بهینه‌سازی تصاویر (Lazy Load)
- بهینه‌سازی CSS/JS (Minify)
- تنظیم Caching با Redis

**خروجی**: PWA قابل نصب

---

### 🔵 فاز 14: تنظیمات قابل تغییر و مانیتورینگ
**هدف**: امکان تغییر تنظیمات از ادمین

**وظایف**:
- صفحه تنظیمات در ادمین
- تغییر منابع از ادمین
- تغییر کلیدهای API
- تنظیم Crawl Interval
- تنظیم Min Impact Score
- داشبورد آمار (تعداد اخبار، کرال‌ها، استفاده API)
- نمودارها و گراف‌ها
- لاگ‌های سیستم

**خروجی**: پنل کنترل کامل

---

### 🔵 فاز 15: تست نهایی و دیپلوی
**هدف**: تست کامل و آماده‌سازی برای Production

**وظایف**:
- تست تمام فرآیندها (End-to-End)
- تست کرال
- تست ترجمه و AI
- تست انتشار
- تست UI روی دستگاه‌های مختلف
- تنظیمات امنیتی (HTTPS, CORS, CSRF)
- تنظیم Nginx
- نوشتن Docker Compose برای Production
- نوشتن README.md
- تهیه راهنمای نصب و راه‌اندازی

**خروجی**: پروژه آماده دیپلوی

---

## 🎨 استفاده از طراحی

طراحی‌های صفحات در مسیر `./design/` قرار دارد. در فاز 11 و 12، تمامی طراحی‌ها **دقیقا** همان‌طور که هستند پیاده‌سازی می‌شوند:

- رنگ‌ها
- فونت‌ها
- Layout
- Spacing
- Components
- Animations (اگر باشد)

از Tailwind CSS برای پیاده‌سازی استفاده می‌شود.

---

## ⚙️ تنظیمات محیط (Environment Variables)

```env
# Django
DEBUG=False
SECRET_KEY=your-secret-key
ALLOWED_HOSTS=cryptomohem.ir,www.cryptomohem.ir

# Database
DB_NAME=cryptomohem
DB_USER=postgres
DB_PASSWORD=your-password
DB_HOST=db
DB_PORT=5432

# Redis
REDIS_HOST=redis
REDIS_PORT=6379

# Gemini AI
GEMINI_API_KEY_1=your-key-1
GEMINI_API_KEY_2=your-key-2

# Image Generation
IMAGE_API_KEY=your-image-api-key

# Telegram
TELEGRAM_BOT_TOKEN=your-bot-token
TELEGRAM_CHANNEL_ID=@your_channel
TELEGRAM_API_ID=your-api-id
TELEGRAM_API_HASH=your-api-hash

# Site
SITE_URL=https://cryptomohem.ir
```

---

## 🚀 دستورات مهم

```bash
# ساخت و اجرا
docker-compose up --build

# اجرای Migrations
docker-compose exec web python manage.py migrate

# ساخت Superuser
docker-compose exec web python manage.py createsuperuser

# جمع‌آوری Static Files
docker-compose exec web python manage.py collectstatic

# مشاهده Logs
docker-compose logs -f

# اجرای Celery Worker
docker-compose exec celery celery -A config worker -l info

# اجرای Celery Beat
docker-compose exec celery celery -A config beat -l info
```

---

## 📝 نکات مهم برای توسعه

1. **رعایت دقیق فازها**: هر فاز باید کامل شود قبل از رفتن به فاز بعد
2. **تست مداوم**: بعد از هر تغییر، پروژه باید اجرا و تست شود
3. **مدیریت خطا**: همه API ها و Task ها باید Error Handling مناسب داشته باشند
4. **لاگ‌گیری**: استفاده از logging برای debug و مانیتور
5. **امنیت**: تمام کلیدها و اطلاعات حساس در environment variables
6. **مستندسازی**: کد باید docstring و comment مناسب داشته باشد
7. **قابلیت استفاده مجدد**: کد باید به گونه‌ای باشد که برای حوزه‌های دیگر هم قابل استفاده باشد

---

## 🎯 شاخص‌های موفقیت

- ✅ کرال خودکار از حداقل 5 منبع
- ✅ ترجمه روزانه حداقل 20 خبر
- ✅ فیلتر 100% اخبار تکراری
- ✅ انتشار روزانه حداقل 5 خبر مهم در تلگرام
- ✅ زمان بارگذاری صفحه اصلی کمتر از 2 ثانیه
- ✅ سایت 100% ریسپانسیو
- ✅ PWA قابل نصب و استفاده آفلاین
- ✅ امکان تغییر تمام تنظیمات از ادمین

---

## 📞 نکته نهایی

این پروژه به گونه‌ای طراحی شده که می‌تواند برای **هر حوزه خبری دیگری** نیز استفاده شود (مثلا: فوتبال، سیاست، تکنولوژی). تنها کافیست:

1. منابع را از پنل ادمین تغییر دهید
2. دسته‌بندی‌ها را تغییر دهید
3. Prompt های AI را تنظیم کنید

**پس کدنویسی باید Generic و قابل استفاده مجدد باشد.**
